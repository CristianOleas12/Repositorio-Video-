
package webservicecli;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.5
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Servicios", targetNamespace = "http://webservicecli/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Servicios {


    /**
     * 
     * @param estado
     * @param direccion
     * @param id
     * @param nombre
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "actualizar", targetNamespace = "http://webservicecli/", className = "webservicecli.Actualizar")
    @ResponseWrapper(localName = "actualizarResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.ActualizarResponse")
    @Action(input = "http://webservicecli/Servicios/actualizarRequest", output = "http://webservicecli/Servicios/actualizarResponse")
    public String actualizar(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "nombre", targetNamespace = "")
        String nombre,
        @WebParam(name = "direccion", targetNamespace = "")
        String direccion,
        @WebParam(name = "estado", targetNamespace = "")
        int estado);

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://webservicecli/", className = "webservicecli.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.HelloResponse")
    @Action(input = "http://webservicecli/Servicios/helloRequest", output = "http://webservicecli/Servicios/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param id
     * @return
     *     returns webservicecli.Cliente
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarID", targetNamespace = "http://webservicecli/", className = "webservicecli.ListarID")
    @ResponseWrapper(localName = "listarIDResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.ListarIDResponse")
    @Action(input = "http://webservicecli/Servicios/listarIDRequest", output = "http://webservicecli/Servicios/listarIDResponse")
    public Cliente listarID(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @return
     *     returns java.util.List<webservicecli.Cliente>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listar", targetNamespace = "http://webservicecli/", className = "webservicecli.Listar")
    @ResponseWrapper(localName = "listarResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.ListarResponse")
    @Action(input = "http://webservicecli/Servicios/listarRequest", output = "http://webservicecli/Servicios/listarResponse")
    public List<Cliente> listar();

    /**
     * 
     * @param id
     * @return
     *     returns webservicecli.Cliente
     */
    @WebMethod(operationName = "Eliminar")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "Eliminar", targetNamespace = "http://webservicecli/", className = "webservicecli.Eliminar")
    @ResponseWrapper(localName = "EliminarResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.EliminarResponse")
    @Action(input = "http://webservicecli/Servicios/EliminarRequest", output = "http://webservicecli/Servicios/EliminarResponse")
    public Cliente eliminar(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param estado
     * @param direccion
     * @param nombre
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "agregar", targetNamespace = "http://webservicecli/", className = "webservicecli.Agregar")
    @ResponseWrapper(localName = "agregarResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.AgregarResponse")
    @Action(input = "http://webservicecli/Servicios/agregarRequest", output = "http://webservicecli/Servicios/agregarResponse")
    public String agregar(
        @WebParam(name = "nombre", targetNamespace = "")
        String nombre,
        @WebParam(name = "direccion", targetNamespace = "")
        String direccion,
        @WebParam(name = "estado", targetNamespace = "")
        int estado);

    /**
     * 
     * @param name
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "perimetro", targetNamespace = "http://webservicecli/", className = "webservicecli.Perimetro")
    @ResponseWrapper(localName = "perimetroResponse", targetNamespace = "http://webservicecli/", className = "webservicecli.PerimetroResponse")
    @Action(input = "http://webservicecli/Servicios/perimetroRequest", output = "http://webservicecli/Servicios/perimetroResponse")
    public double perimetro(
        @WebParam(name = "name", targetNamespace = "")
        double name);

}
